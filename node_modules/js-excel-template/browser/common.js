import * as tslib_1 from "tslib";
var JsExcelTemplateBase = /** @class */ (function () {
    function JsExcelTemplateBase(workbook) {
        this.workbook = workbook;
    }
    // tslint:disable-next-line:cognitive-complexity
    JsExcelTemplateBase.prototype.set = function (name, value) {
        var e_1, _a, e_2, _b;
        if (Array.isArray(value)) {
            if (value.length === 0) {
                return;
            }
            try {
                for (var _c = tslib_1.__values(this.workbook.SheetNames), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var sheetName = _d.value;
                    var sheet = this.workbook.Sheets[sheetName];
                    var targetRowIndex = this.findRowIndex(name, sheet);
                    if (targetRowIndex >= 0) {
                        var ref = sheet['!ref'];
                        if (ref) {
                            var _e = tslib_1.__read(ref.split(':'), 2), leftRange = _e[0], rightRange = _e[1];
                            var _f = this.parseCellName(rightRange), maxColumnName = _f.column, maxRowCount = _f.rowIndex;
                            var newMaxRowCount = maxRowCount + value.length;
                            if (maxRowCount >= 0) {
                                sheet['!ref'] = leftRange + ":" + maxColumnName + newMaxRowCount;
                            }
                        }
                        for (var cellName in sheet) {
                            if (sheet.hasOwnProperty(cellName) && cellName.indexOf('!') !== 0) {
                                var _g = this.parseCellName(cellName), column = _g.column, rowIndex = _g.rowIndex;
                                var cell = sheet[cellName];
                                if (rowIndex === targetRowIndex && cell.w) {
                                    var index = cell.w.indexOf("{" + name + ".");
                                    if (index >= 0) {
                                        var fieldName = void 0;
                                        for (var i = index + ("{" + name + ".").length; i < cell.w.length; i++) {
                                            if (cell.w[i] === '}') {
                                                fieldName = cell.w.substring(index + ("{" + name + ".").length, i);
                                                break;
                                            }
                                        }
                                        if (fieldName) {
                                            for (var i = 1; i < value.length; i++) {
                                                sheet[column + (rowIndex + i)] = JSON.parse(JSON.stringify(sheet[cellName]));
                                            }
                                            for (var i = 0; i < value.length; i++) {
                                                var newCell = sheet[column + (rowIndex + i)];
                                                this.setCell(newCell, "{" + name + "." + fieldName + "}", value[i][fieldName]);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        return;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            try {
                for (var _h = tslib_1.__values(this.workbook.SheetNames), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var sheetName = _j.value;
                    var sheet = this.workbook.Sheets[sheetName];
                    for (var cellName in sheet) {
                        if (sheet.hasOwnProperty(cellName) && cellName.indexOf('!') !== 0) {
                            var cell = sheet[cellName];
                            this.setCell(cell, "{" + name + "}", value);
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    JsExcelTemplateBase.prototype.setCell = function (cell, name, value) {
        if (cell.v && typeof cell.v === 'string' && cell.v.indexOf(name) >= 0) {
            cell.v = cell.v === name ? value : cell.v.split(name).join(value);
            if (typeof cell.v === 'number') {
                cell.t = 'n';
            }
            else if (Object.prototype.toString.call(cell.v) === '[object Date]') {
                cell.t = 'd';
            }
            else if (cell.v === true || cell.v === false) {
                cell.t = 'b';
            }
        }
    };
    JsExcelTemplateBase.prototype.parseCellName = function (cellName) {
        for (var i = 0; i < cellName.length; i++) {
            if (!isNaN(+cellName[i])) {
                return {
                    column: cellName.substring(0, i),
                    rowIndex: +cellName.substring(i)
                };
            }
        }
        return {
            column: '',
            rowIndex: -1
        };
    };
    JsExcelTemplateBase.prototype.findRowIndex = function (name, sheet) {
        for (var cellName in sheet) {
            if (sheet.hasOwnProperty(cellName) && cellName.indexOf('!') !== 0) {
                var cell = sheet[cellName];
                if (cell.w && cell.w.indexOf("{" + name + ".") >= 0) {
                    var rowIndex = this.parseCellName(cellName).rowIndex;
                    return rowIndex;
                }
            }
        }
        return -1;
    };
    return JsExcelTemplateBase;
}());
export default JsExcelTemplateBase;
